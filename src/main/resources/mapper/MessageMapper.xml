<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.c.community.dao.MessageMapper">
    <insert id="insertMessage" parameterType="com.c.community.entity.Message" keyProperty="id">
        insert into message (from_id, to_id, conversation_id, content, status, create_time)
        values (#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>
    <update id="updateMessageStatus">
        update message
        set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="selectConversationByUserId" resultType="com.c.community.entity.Message">
        select id,
               from_id,
               to_id,
               conversation_id,
               content,
               status,
               create_time
        from message
        where id in (
            select max(id)
            from message
            where status != 2
              and from_id != 1
              and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id)
        order by id desc
        limit #{offset}, #{limit}
    </select>
    <select id="selectConversationCountByUserId" resultType="java.lang.Integer">
        select count(conversation_id)
        from message
        where id in (
            select max(id)
            from message
            where status != 2
              and from_id != 1
              and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id)
    </select>
    <select id="selectConversationByConversationId" resultType="com.c.community.entity.Message">
        select id, from_id, to_id, conversation_id, content, status, create_time
        from message
        where conversation_id = #{conversationId}
          and status != 2
          and from_id != 1
        order by id desc
        limit #{offset}, #{limit}
    </select>
    <select id="selectConversationCountByConversationId" resultType="java.lang.Integer">
        select count(id)
        from message
        where conversation_id = #{conversationId}
          and status != 2
          and from_id != 1
    </select>
    <select id="selectUnreadMessageCountByConversationId" resultType="java.lang.Integer">
        select count(id)
        from message
        where to_id=#{userId} and status = 0 and from_id != 1
        <if test="conversationId!=null">
            and conversation_id=#{conversationId}
        </if>
    </select>
    <select id="selectLatestNotice" resultType="com.c.community.entity.Message">
        select id, from_id, to_id, conversation_id, content, status, create_time
        from message
        where id in (
            select max(id)
            from message
            where status != 2
              and from_id = 1
              and to_id = #{userId}
              and conversation_id = #{topic}
        )
    </select>
    <select id="selectNoticeCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where status != 2
          and from_id = 1
          and to_id = #{userId}
          and conversation_id = #{topic}
    </select>
    <select id="selectUnreadNoticeCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="topic != null">
            and conversation_id = #{topic}
        </if>
    </select>
    <select id="selectNotices" resultType="com.c.community.entity.Message">
        select id, from_id, to_id, conversation_id, content, status, create_time
        from message
        where status != 2
          and from_id = 1
          and to_id = #{userId}
          and conversation_id = #{topic}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>
</mapper>